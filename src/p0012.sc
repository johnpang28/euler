/*

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

 */
import math.sqrt

object p0012 {

  val triNums: Stream[Int] = 1 #:: 3 #:: 6 #:: 10 #:: 15 #:: 21 #:: 28 #:: Stream.from(8).map(i => i + triNums(i - 2))

  def factors(n: Int): Seq[Int] = {

    val root = sqrt(n)

    val max = if (root.ceil >= n / 2.0) root.floor.toInt else root.ceil.toInt

    val r = if (n % 2 == 0) 1 to max else 1 to max by 2

    (for {
      i <- r.toList if n % i == 0
    } yield (i, n/i)).flatMap { p => if (p._1 == p._2) List(p._1) else List(p._1, p._2) }
  }

  triNums(triNums.takeWhile(factors(_).size <= 500).toList.size) // 76576500

}
